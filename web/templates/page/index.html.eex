<div class="row explanation">
  <div class="col-lg-12">
    <h2>Driving Instructions</h3>
    <p>
      Driving a roombot happens over a websocket connection.
      This means you can write your driving program in whatever language and style you want.
      This page documents the types of messages you can send and receive when you connect to the roombot.
    </p>
  </div>
</div>

<div class="row explanation message">
  <div class="col-lg-12">
    <h3>Connecting to the Roombot</h3>
    <p>
      Each roombot will have a local ip address.
      You can find a list of roombots and their local ips on the <a href="/bots">Bots page</a>.
      Once you know the IP address of a bot you want to connect to you can open a websocket to <span class="code">ws://ROOMBOT-IP-ADDRESS/socket/websocket</span>.
      <br />
      Example applications exist that you can use as a starting point:
    </p>
    <ul>
      <li>Python: <a href="https://github.com/film42/python_roombots">https://github.com/film42/python_roombots</a></li>
      <li>Javascript: <a href="https://github.com/mmmries/browser_roombot">https://github.com/mmmries/browser_roombot</a></li>
      <li>Ruby: <a href="https://github.com/mmmries/ruby_roombot">https://github.com/mmmries/ruby_roombot</a></li>
      <li>Elixir: <a href="https://github.com/mmmries/elixir_roombot">https://github.com/mmmries/elixir_roombot</a></li>
      <li>Java: <a href="https://github.com/film42/java_roombots">https://github.com/film42/java_roombots</a></li>
    </ul>
  </div>
</div>

<div class="row explanation message">
  <div class="col-lg-12">
    <h3>JSON Structure</h3>
    <p>
      All the JSON messages you send to the websocket and receive from the websocket will have a similar structure.
      The structure is the standard followed by <a href="http://www.phoenixframework.org/docs/channels">Phoenix Channels</a>.
    </p>
    <ul>
      <li><span class="code">topic</span> All messages happen in a topic. Roombot always uses <span class="code">"topic":"roomba"</span>.</li>
      <li><span class="code">event</span> The event is a sort of type for a message. It makes it easy to distinguish between a move command an an update about the sensors on the roomba.</li>
      <li><span class="code">ref</span> A ref is a unique identifier for a given message. Each time you send a message to the roombot, the roombot can respond that request and it will include the same <span class="code">ref</span>.</li>
      <li><span class="code">payload</span> This is where you put any data that are sending and where the roombot puts any data that is is sending. It is always a JSON object (never a list or a single scalar value).
    </ul>
  </div>
</div>

<div class="row explanation message">
  <div class="col-lg-12">
    <h3>An Example Session</h3>
    <p>
      The best way to describe these messages is just to give an example of what your program might send and receive.
      I'll put some notes along the way to help point out the patterns you can depend on.
    </p>
  </div>
</div>

<!-- Joining -->
<div class="row explanation">
  <div class="col-lg-6">
    <h5>&nbsp;</h5>
    When you first connect to the roombot you will need to send a <span class="code">phx_join</span> message.
    This tells the roombot that it should start sending you status updates and expect you to send driving commands.
  </div>

  <div class="col-lg-6">
    <h5>Your Program => Roombot</h5>
    <pre>
{
  "topic":"roomba",
  "event":"phx_join",
  "ref":1,
  "payload":{}
}</pre>
  </div>
</div>

<div class="row explanation">
  <div class="col-lg-6">
    <h5>&nbsp;</h5>
    The Roombot will send back a <span class="code">phx_reply</span> message to let you know that you have successfully joined the topic.
    <br/><br/>
    Note: the roombot sent back <span class="code">"ref": 1</span> because that is the ref we sent when we asked to join the topic. The <span class="code">"ref"</span> is how we know which messages from the roombot are responses to our requests.
  </div>

  <div class="col-lg-6">
    <h5>Roombot => Your Program</h5>
    <pre>
{
  "topic":"roomba",
  "event":"phx_reply",
  "ref":1,
  "payload":{
    "status":"ok",
    "response":{}
  }
}</pre>
  </div>
</div>

<!-- Sensor Updates -->
<div class="row explanation">
  <div class="col-lg-6">
    <h5>&nbsp;</h5>
    Now the roombot will start to send you sensor updates.
    These messages tell you what is happening with the roomba.
    <br/><br/>
    <ul>
      <li><span class="code">light_bumper_*</span> these are infrared sensors along the front of the roomba that detect objects between 1-3" away. They have a value of 0 or 1.</li>
      <li><span class="code">bumper_*</span> the physical bumper sensors. Also have values of 0 or 1.</li>
      <li><span class="code">battery_*</span> the capacity and current charge of the battery measured in mAh</li>
    </ul>

    For more details please see <a href="/sensors">sensors page</a>.
  </div>

  <div class="col-lg-6">
    <h5>Roombot => Your Program</h5>
    <pre>
{
  "topic":"roomba",
  "ref":null,
  "payload":{
    "light_bumper_right_front":0,
    "light_bumper_right_center":0,
    "light_bumper_right":0,
    "light_bumper_left_front":0,
    "light_bumper_left_center":1,
    "light_bumper_left":0,
    "bumper_right":0,
    "bumper_left":0,
    "battery_charge":2751,
    "battery_capacity":2366
  },
  "event":"sensor_update"
}</pre>
  </div>
</div>

<!-- Drive Commands -->
<div class="row explanation">
  <div class="col-lg-6">
    <h5>&nbsp;</h5>
    Once you know where you want to go you can send a drive command.
    The velocity is measured in mm/s. -500 to 500 are the valid values.
    The radius is a desired radius you want to turn through. It is measures as mm between the center of the roomba and the center of the turning circle.  Negative values turn left and positive values turn right. -2000 to 2000 are valid values. 0 will drive straight.
  </div>

  <div class="col-lg-6">
    <h5>Your Program => Roombot</h5>
    <pre>
{
  "topic":"roomba",
  "event":"drive",
  "ref":12,
  "payload":{
    "velocity": 100,
    "radius": -500
  }
}</pre>
  </div>
</div>

<!-- Hearbeats -->
<div class="row explanation">
  <div class="col-lg-6">
    <h5>&nbsp;</h5>
    Sometimes you will want to healthcheck your websocket or just send a small message to keep the network connection active.
    This will keep the latency low between the roombot and your program.
    To do this you can send a heartbeat message
  </div>

  <div class="col-lg-6">
    <h5>Your Program => Roombot</h5>
    <pre>
{
  "topic":"phoenix",
  "event":"heartbeat",
  "payload":{},
  "ref":"6"
}</pre>
  </div>
</div>

<div class="row explanation">
  <div class="col-lg-6">
    <h5>&nbsp;</h5>
    The Roombot will send back a <span class="code">phx_reply</span> message to let you know that it got your heartbeat.
    <br/><br/>
    Note: I send a hearbeat once per second for most of my driving programs.
  </div>

  <div class="col-lg-6">
    <h5>Roombot => Your Program</h5>
    <pre>
{
  "topic":"phoenix",
  "ref":"6",
  "payload":{
    "status":"ok",
    "response":{}
  },
  "event":"phx_reply"
}</pre>
  </div>
</div>
